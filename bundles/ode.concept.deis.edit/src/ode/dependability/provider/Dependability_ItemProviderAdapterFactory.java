/*******************************************************************************
 * Copyright (c) 2018 DEIS Project
 * Copyright (c) 2020 PANORAMA Project
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the MIT License, available at: 
 * https://opensource.org/licenses/MIT
 *
 * SPDX-License-Identifier: MIT
 *******************************************************************************/
/**
 */
package ode.dependability.provider;

import java.util.ArrayList;
import java.util.Collection;

import ode.dependability.util.Dependability_AdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class Dependability_ItemProviderAdapterFactory extends Dependability_AdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Dependability_ItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link ode.dependability.MaintenanceProcedure} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MaintenanceProcedureItemProvider maintenanceProcedureItemProvider;

	/**
	 * This creates an adapter for a {@link ode.dependability.MaintenanceProcedure}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMaintenanceProcedureAdapter() {
		if (maintenanceProcedureItemProvider == null) {
			maintenanceProcedureItemProvider = new MaintenanceProcedureItemProvider(this);
		}

		return maintenanceProcedureItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ode.dependability.MeasureType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MeasureTypeItemProvider measureTypeItemProvider;

	/**
	 * This creates an adapter for a {@link ode.dependability.MeasureType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMeasureTypeAdapter() {
		if (measureTypeItemProvider == null) {
			measureTypeItemProvider = new MeasureTypeItemProvider(this);
		}

		return measureTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ode.dependability.Measure} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MeasureItemProvider measureItemProvider;

	/**
	 * This creates an adapter for a {@link ode.dependability.Measure}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMeasureAdapter() {
		if (measureItemProvider == null) {
			measureItemProvider = new MeasureItemProvider(this);
		}

		return measureItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ode.dependability.FaultToleranceMeasure} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FaultToleranceMeasureItemProvider faultToleranceMeasureItemProvider;

	/**
	 * This creates an adapter for a {@link ode.dependability.FaultToleranceMeasure}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFaultToleranceMeasureAdapter() {
		if (faultToleranceMeasureItemProvider == null) {
			faultToleranceMeasureItemProvider = new FaultToleranceMeasureItemProvider(this);
		}

		return faultToleranceMeasureItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ode.dependability.DependabilityPackage} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DependabilityPackageItemProvider dependabilityPackageItemProvider;

	/**
	 * This creates an adapter for a {@link ode.dependability.DependabilityPackage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDependabilityPackageAdapter() {
		if (dependabilityPackageItemProvider == null) {
			dependabilityPackageItemProvider = new DependabilityPackageItemProvider(this);
		}

		return dependabilityPackageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ode.dependability.HARAPackage} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HARAPackageItemProvider haraPackageItemProvider;

	/**
	 * This creates an adapter for a {@link ode.dependability.HARAPackage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHARAPackageAdapter() {
		if (haraPackageItemProvider == null) {
			haraPackageItemProvider = new HARAPackageItemProvider(this);
		}

		return haraPackageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ode.dependability.Hazard} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HazardItemProvider hazardItemProvider;

	/**
	 * This creates an adapter for a {@link ode.dependability.Hazard}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHazardAdapter() {
		if (hazardItemProvider == null) {
			hazardItemProvider = new HazardItemProvider(this);
		}

		return hazardItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ode.dependability.HazardTypeSystem} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HazardTypeSystemItemProvider hazardTypeSystemItemProvider;

	/**
	 * This creates an adapter for a {@link ode.dependability.HazardTypeSystem}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHazardTypeSystemAdapter() {
		if (hazardTypeSystemItemProvider == null) {
			hazardTypeSystemItemProvider = new HazardTypeSystemItemProvider(this);
		}

		return hazardTypeSystemItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ode.dependability.HazardType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HazardTypeItemProvider hazardTypeItemProvider;

	/**
	 * This creates an adapter for a {@link ode.dependability.HazardType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHazardTypeAdapter() {
		if (hazardTypeItemProvider == null) {
			hazardTypeItemProvider = new HazardTypeItemProvider(this);
		}

		return hazardTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ode.dependability.Malfunction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MalfunctionItemProvider malfunctionItemProvider;

	/**
	 * This creates an adapter for a {@link ode.dependability.Malfunction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMalfunctionAdapter() {
		if (malfunctionItemProvider == null) {
			malfunctionItemProvider = new MalfunctionItemProvider(this);
		}

		return malfunctionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ode.dependability.RiskAssessment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RiskAssessmentItemProvider riskAssessmentItemProvider;

	/**
	 * This creates an adapter for a {@link ode.dependability.RiskAssessment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRiskAssessmentAdapter() {
		if (riskAssessmentItemProvider == null) {
			riskAssessmentItemProvider = new RiskAssessmentItemProvider(this);
		}

		return riskAssessmentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ode.dependability.RiskParameter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RiskParameterItemProvider riskParameterItemProvider;

	/**
	 * This creates an adapter for a {@link ode.dependability.RiskParameter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRiskParameterAdapter() {
		if (riskParameterItemProvider == null) {
			riskParameterItemProvider = new RiskParameterItemProvider(this);
		}

		return riskParameterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ode.dependability.Situation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SituationItemProvider situationItemProvider;

	/**
	 * This creates an adapter for a {@link ode.dependability.Situation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSituationAdapter() {
		if (situationItemProvider == null) {
			situationItemProvider = new SituationItemProvider(this);
		}

		return situationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ode.dependability.Accident} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AccidentItemProvider accidentItemProvider;

	/**
	 * This creates an adapter for a {@link ode.dependability.Accident}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAccidentAdapter() {
		if (accidentItemProvider == null) {
			accidentItemProvider = new AccidentItemProvider(this);
		}

		return accidentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ode.dependability.OperatorMeasure} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OperatorMeasureItemProvider operatorMeasureItemProvider;

	/**
	 * This creates an adapter for a {@link ode.dependability.OperatorMeasure}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOperatorMeasureAdapter() {
		if (operatorMeasureItemProvider == null) {
			operatorMeasureItemProvider = new OperatorMeasureItemProvider(this);
		}

		return operatorMeasureItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ode.dependability.RequirementPackage} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RequirementPackageItemProvider requirementPackageItemProvider;

	/**
	 * This creates an adapter for a {@link ode.dependability.RequirementPackage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRequirementPackageAdapter() {
		if (requirementPackageItemProvider == null) {
			requirementPackageItemProvider = new RequirementPackageItemProvider(this);
		}

		return requirementPackageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ode.dependability.LegalContract} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LegalContractItemProvider legalContractItemProvider;

	/**
	 * This creates an adapter for a {@link ode.dependability.LegalContract}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLegalContractAdapter() {
		if (legalContractItemProvider == null) {
			legalContractItemProvider = new LegalContractItemProvider(this);
		}

		return legalContractItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ode.dependability.SafetyRequirement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SafetyRequirementItemProvider safetyRequirementItemProvider;

	/**
	 * This creates an adapter for a {@link ode.dependability.SafetyRequirement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSafetyRequirementAdapter() {
		if (safetyRequirementItemProvider == null) {
			safetyRequirementItemProvider = new SafetyRequirementItemProvider(this);
		}

		return safetyRequirementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ode.dependability.SecurityRequirement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SecurityRequirementItemProvider securityRequirementItemProvider;

	/**
	 * This creates an adapter for a {@link ode.dependability.SecurityRequirement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSecurityRequirementAdapter() {
		if (securityRequirementItemProvider == null) {
			securityRequirementItemProvider = new SecurityRequirementItemProvider(this);
		}

		return securityRequirementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ode.dependability.DomainPackage} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DomainPackageItemProvider domainPackageItemProvider;

	/**
	 * This creates an adapter for a {@link ode.dependability.DomainPackage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDomainPackageAdapter() {
		if (domainPackageItemProvider == null) {
			domainPackageItemProvider = new DomainPackageItemProvider(this);
		}

		return domainPackageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ode.dependability.Standard} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StandardItemProvider standardItemProvider;

	/**
	 * This creates an adapter for a {@link ode.dependability.Standard}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStandardAdapter() {
		if (standardItemProvider == null) {
			standardItemProvider = new StandardItemProvider(this);
		}

		return standardItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ode.dependability.AssuranceLevel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AssuranceLevelItemProvider assuranceLevelItemProvider;

	/**
	 * This creates an adapter for a {@link ode.dependability.AssuranceLevel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAssuranceLevelAdapter() {
		if (assuranceLevelItemProvider == null) {
			assuranceLevelItemProvider = new AssuranceLevelItemProvider(this);
		}

		return assuranceLevelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ode.dependability.SafetyStandard} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SafetyStandardItemProvider safetyStandardItemProvider;

	/**
	 * This creates an adapter for a {@link ode.dependability.SafetyStandard}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSafetyStandardAdapter() {
		if (safetyStandardItemProvider == null) {
			safetyStandardItemProvider = new SafetyStandardItemProvider(this);
		}

		return safetyStandardItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ode.dependability.TARAPackage} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TARAPackageItemProvider taraPackageItemProvider;

	/**
	 * This creates an adapter for a {@link ode.dependability.TARAPackage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTARAPackageAdapter() {
		if (taraPackageItemProvider == null) {
			taraPackageItemProvider = new TARAPackageItemProvider(this);
		}

		return taraPackageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ode.dependability.Asset} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AssetItemProvider assetItemProvider;

	/**
	 * This creates an adapter for a {@link ode.dependability.Asset}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAssetAdapter() {
		if (assetItemProvider == null) {
			assetItemProvider = new AssetItemProvider(this);
		}

		return assetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ode.dependability.SecurityControl} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SecurityControlItemProvider securityControlItemProvider;

	/**
	 * This creates an adapter for a {@link ode.dependability.SecurityControl}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSecurityControlAdapter() {
		if (securityControlItemProvider == null) {
			securityControlItemProvider = new SecurityControlItemProvider(this);
		}

		return securityControlItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ode.dependability.SecurityCapability} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SecurityCapabilityItemProvider securityCapabilityItemProvider;

	/**
	 * This creates an adapter for a {@link ode.dependability.SecurityCapability}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSecurityCapabilityAdapter() {
		if (securityCapabilityItemProvider == null) {
			securityCapabilityItemProvider = new SecurityCapabilityItemProvider(this);
		}

		return securityCapabilityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ode.dependability.Vulnerability} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VulnerabilityItemProvider vulnerabilityItemProvider;

	/**
	 * This creates an adapter for a {@link ode.dependability.Vulnerability}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVulnerabilityAdapter() {
		if (vulnerabilityItemProvider == null) {
			vulnerabilityItemProvider = new VulnerabilityItemProvider(this);
		}

		return vulnerabilityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ode.dependability.VulnerableItem} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VulnerableItemItemProvider vulnerableItemItemProvider;

	/**
	 * This creates an adapter for a {@link ode.dependability.VulnerableItem}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVulnerableItemAdapter() {
		if (vulnerableItemItemProvider == null) {
			vulnerableItemItemProvider = new VulnerableItemItemProvider(this);
		}

		return vulnerableItemItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ode.dependability.AttackerGoal} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AttackerGoalItemProvider attackerGoalItemProvider;

	/**
	 * This creates an adapter for a {@link ode.dependability.AttackerGoal}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAttackerGoalAdapter() {
		if (attackerGoalItemProvider == null) {
			attackerGoalItemProvider = new AttackerGoalItemProvider(this);
		}

		return attackerGoalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ode.dependability.SecurityRisk} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SecurityRiskItemProvider securityRiskItemProvider;

	/**
	 * This creates an adapter for a {@link ode.dependability.SecurityRisk}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSecurityRiskAdapter() {
		if (securityRiskItemProvider == null) {
			securityRiskItemProvider = new SecurityRiskItemProvider(this);
		}

		return securityRiskItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ode.dependability.Attack} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AttackItemProvider attackItemProvider;

	/**
	 * This creates an adapter for a {@link ode.dependability.Attack}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAttackAdapter() {
		if (attackItemProvider == null) {
			attackItemProvider = new AttackItemProvider(this);
		}

		return attackItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ode.dependability.Payload} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PayloadItemProvider payloadItemProvider;

	/**
	 * This creates an adapter for a {@link ode.dependability.Payload}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPayloadAdapter() {
		if (payloadItemProvider == null) {
			payloadItemProvider = new PayloadItemProvider(this);
		}

		return payloadItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ode.dependability.Action} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActionItemProvider actionItemProvider;

	/**
	 * This creates an adapter for a {@link ode.dependability.Action}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActionAdapter() {
		if (actionItemProvider == null) {
			actionItemProvider = new ActionItemProvider(this);
		}

		return actionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ode.dependability.ThreatAgent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ThreatAgentItemProvider threatAgentItemProvider;

	/**
	 * This creates an adapter for a {@link ode.dependability.ThreatAgent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createThreatAgentAdapter() {
		if (threatAgentItemProvider == null) {
			threatAgentItemProvider = new ThreatAgentItemProvider(this);
		}

		return threatAgentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ode.dependability.Human} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HumanItemProvider humanItemProvider;

	/**
	 * This creates an adapter for a {@link ode.dependability.Human}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHumanAdapter() {
		if (humanItemProvider == null) {
			humanItemProvider = new HumanItemProvider(this);
		}

		return humanItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ode.dependability.NonHuman} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NonHumanItemProvider nonHumanItemProvider;

	/**
	 * This creates an adapter for a {@link ode.dependability.NonHuman}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNonHumanAdapter() {
		if (nonHumanItemProvider == null) {
			nonHumanItemProvider = new NonHumanItemProvider(this);
		}

		return nonHumanItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ode.dependability.Formalization} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FormalizationItemProvider formalizationItemProvider;

	/**
	 * This creates an adapter for a {@link ode.dependability.Formalization}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFormalizationAdapter() {
		if (formalizationItemProvider == null) {
			formalizationItemProvider = new FormalizationItemProvider(this);
		}

		return formalizationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ode.dependability.Assertion} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AssertionItemProvider assertionItemProvider;

	/**
	 * This creates an adapter for a {@link ode.dependability.Assertion}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAssertionAdapter() {
		if (assertionItemProvider == null) {
			assertionItemProvider = new AssertionItemProvider(this);
		}

		return assertionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ode.dependability.DependabilityContract} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DependabilityContractItemProvider dependabilityContractItemProvider;

	/**
	 * This creates an adapter for a {@link ode.dependability.DependabilityContract}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDependabilityContractAdapter() {
		if (dependabilityContractItemProvider == null) {
			dependabilityContractItemProvider = new DependabilityContractItemProvider(this);
		}

		return dependabilityContractItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void dispose() {
		if (maintenanceProcedureItemProvider != null) maintenanceProcedureItemProvider.dispose();
		if (measureTypeItemProvider != null) measureTypeItemProvider.dispose();
		if (measureItemProvider != null) measureItemProvider.dispose();
		if (faultToleranceMeasureItemProvider != null) faultToleranceMeasureItemProvider.dispose();
		if (dependabilityPackageItemProvider != null) dependabilityPackageItemProvider.dispose();
		if (haraPackageItemProvider != null) haraPackageItemProvider.dispose();
		if (hazardItemProvider != null) hazardItemProvider.dispose();
		if (hazardTypeSystemItemProvider != null) hazardTypeSystemItemProvider.dispose();
		if (hazardTypeItemProvider != null) hazardTypeItemProvider.dispose();
		if (malfunctionItemProvider != null) malfunctionItemProvider.dispose();
		if (riskAssessmentItemProvider != null) riskAssessmentItemProvider.dispose();
		if (riskParameterItemProvider != null) riskParameterItemProvider.dispose();
		if (situationItemProvider != null) situationItemProvider.dispose();
		if (accidentItemProvider != null) accidentItemProvider.dispose();
		if (operatorMeasureItemProvider != null) operatorMeasureItemProvider.dispose();
		if (requirementPackageItemProvider != null) requirementPackageItemProvider.dispose();
		if (legalContractItemProvider != null) legalContractItemProvider.dispose();
		if (safetyRequirementItemProvider != null) safetyRequirementItemProvider.dispose();
		if (securityRequirementItemProvider != null) securityRequirementItemProvider.dispose();
		if (domainPackageItemProvider != null) domainPackageItemProvider.dispose();
		if (standardItemProvider != null) standardItemProvider.dispose();
		if (assuranceLevelItemProvider != null) assuranceLevelItemProvider.dispose();
		if (safetyStandardItemProvider != null) safetyStandardItemProvider.dispose();
		if (taraPackageItemProvider != null) taraPackageItemProvider.dispose();
		if (assetItemProvider != null) assetItemProvider.dispose();
		if (securityControlItemProvider != null) securityControlItemProvider.dispose();
		if (securityCapabilityItemProvider != null) securityCapabilityItemProvider.dispose();
		if (vulnerabilityItemProvider != null) vulnerabilityItemProvider.dispose();
		if (vulnerableItemItemProvider != null) vulnerableItemItemProvider.dispose();
		if (attackerGoalItemProvider != null) attackerGoalItemProvider.dispose();
		if (securityRiskItemProvider != null) securityRiskItemProvider.dispose();
		if (attackItemProvider != null) attackItemProvider.dispose();
		if (payloadItemProvider != null) payloadItemProvider.dispose();
		if (actionItemProvider != null) actionItemProvider.dispose();
		if (threatAgentItemProvider != null) threatAgentItemProvider.dispose();
		if (humanItemProvider != null) humanItemProvider.dispose();
		if (nonHumanItemProvider != null) nonHumanItemProvider.dispose();
		if (formalizationItemProvider != null) formalizationItemProvider.dispose();
		if (assertionItemProvider != null) assertionItemProvider.dispose();
		if (dependabilityContractItemProvider != null) dependabilityContractItemProvider.dispose();
	}

}
