/*******************************************************************************
 * Copyright (c) 2018 DEIS Project
 * Copyright (c) 2020 PANORAMA Project
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the MIT License, available at: 
 * https://opensource.org/licenses/MIT
 *
 * SPDX-License-Identifier: MIT
 *******************************************************************************/
/**
 */
package ode.failureLogic.provider;

import java.util.ArrayList;
import java.util.Collection;

import ode.failureLogic.util.FailureLogic_AdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class FailureLogic_ItemProviderAdapterFactory extends FailureLogic_AdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public FailureLogic_ItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link ode.failureLogic.FailureLogicPackage} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FailureLogicPackageItemProvider failureLogicPackageItemProvider;

	/**
	 * This creates an adapter for a {@link ode.failureLogic.FailureLogicPackage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFailureLogicPackageAdapter() {
		if (failureLogicPackageItemProvider == null) {
			failureLogicPackageItemProvider = new FailureLogicPackageItemProvider(this);
		}

		return failureLogicPackageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ode.failureLogic.Failure} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FailureItemProvider failureItemProvider;

	/**
	 * This creates an adapter for a {@link ode.failureLogic.Failure}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFailureAdapter() {
		if (failureItemProvider == null) {
			failureItemProvider = new FailureItemProvider(this);
		}

		return failureItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ode.failureLogic.SecurityViolation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SecurityViolationItemProvider securityViolationItemProvider;

	/**
	 * This creates an adapter for a {@link ode.failureLogic.SecurityViolation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSecurityViolationAdapter() {
		if (securityViolationItemProvider == null) {
			securityViolationItemProvider = new SecurityViolationItemProvider(this);
		}

		return securityViolationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ode.failureLogic.FailureModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FailureModelItemProvider failureModelItemProvider;

	/**
	 * This creates an adapter for a {@link ode.failureLogic.FailureModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFailureModelAdapter() {
		if (failureModelItemProvider == null) {
			failureModelItemProvider = new FailureModelItemProvider(this);
		}

		return failureModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ode.failureLogic.MinimalCutSets} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MinimalCutSetsItemProvider minimalCutSetsItemProvider;

	/**
	 * This creates an adapter for a {@link ode.failureLogic.MinimalCutSets}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMinimalCutSetsAdapter() {
		if (minimalCutSetsItemProvider == null) {
			minimalCutSetsItemProvider = new MinimalCutSetsItemProvider(this);
		}

		return minimalCutSetsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ode.failureLogic.MinimalCutset} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MinimalCutsetItemProvider minimalCutsetItemProvider;

	/**
	 * This creates an adapter for a {@link ode.failureLogic.MinimalCutset}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMinimalCutsetAdapter() {
		if (minimalCutsetItemProvider == null) {
			minimalCutsetItemProvider = new MinimalCutsetItemProvider(this);
		}

		return minimalCutsetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ode.failureLogic.ProbDist} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProbDistItemProvider probDistItemProvider;

	/**
	 * This creates an adapter for a {@link ode.failureLogic.ProbDist}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProbDistAdapter() {
		if (probDistItemProvider == null) {
			probDistItemProvider = new ProbDistItemProvider(this);
		}

		return probDistItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ode.failureLogic.ProbDistParam} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProbDistParamItemProvider probDistParamItemProvider;

	/**
	 * This creates an adapter for a {@link ode.failureLogic.ProbDistParam}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProbDistParamAdapter() {
		if (probDistParamItemProvider == null) {
			probDistParamItemProvider = new ProbDistParamItemProvider(this);
		}

		return probDistParamItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ode.failureLogic.FaultTree} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FaultTreeItemProvider faultTreeItemProvider;

	/**
	 * This creates an adapter for a {@link ode.failureLogic.FaultTree}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFaultTreeAdapter() {
		if (faultTreeItemProvider == null) {
			faultTreeItemProvider = new FaultTreeItemProvider(this);
		}

		return faultTreeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ode.failureLogic.Cause} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CauseItemProvider causeItemProvider;

	/**
	 * This creates an adapter for a {@link ode.failureLogic.Cause}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCauseAdapter() {
		if (causeItemProvider == null) {
			causeItemProvider = new CauseItemProvider(this);
		}

		return causeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ode.failureLogic.Gate} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GateItemProvider gateItemProvider;

	/**
	 * This creates an adapter for a {@link ode.failureLogic.Gate}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGateAdapter() {
		if (gateItemProvider == null) {
			gateItemProvider = new GateItemProvider(this);
		}

		return gateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ode.failureLogic.MarkovChain} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MarkovChainItemProvider markovChainItemProvider;

	/**
	 * This creates an adapter for a {@link ode.failureLogic.MarkovChain}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMarkovChainAdapter() {
		if (markovChainItemProvider == null) {
			markovChainItemProvider = new MarkovChainItemProvider(this);
		}

		return markovChainItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ode.failureLogic.State} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StateItemProvider stateItemProvider;

	/**
	 * This creates an adapter for a {@link ode.failureLogic.State}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStateAdapter() {
		if (stateItemProvider == null) {
			stateItemProvider = new StateItemProvider(this);
		}

		return stateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ode.failureLogic.Transition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TransitionItemProvider transitionItemProvider;

	/**
	 * This creates an adapter for a {@link ode.failureLogic.Transition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTransitionAdapter() {
		if (transitionItemProvider == null) {
			transitionItemProvider = new TransitionItemProvider(this);
		}

		return transitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ode.failureLogic.FMEA} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FMEAItemProvider fmeaItemProvider;

	/**
	 * This creates an adapter for a {@link ode.failureLogic.FMEA}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFMEAAdapter() {
		if (fmeaItemProvider == null) {
			fmeaItemProvider = new FMEAItemProvider(this);
		}

		return fmeaItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ode.failureLogic.FMEAEntry} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FMEAEntryItemProvider fmeaEntryItemProvider;

	/**
	 * This creates an adapter for a {@link ode.failureLogic.FMEAEntry}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFMEAEntryAdapter() {
		if (fmeaEntryItemProvider == null) {
			fmeaEntryItemProvider = new FMEAEntryItemProvider(this);
		}

		return fmeaEntryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ode.failureLogic.FMEDAEntry} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FMEDAEntryItemProvider fmedaEntryItemProvider;

	/**
	 * This creates an adapter for a {@link ode.failureLogic.FMEDAEntry}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFMEDAEntryAdapter() {
		if (fmedaEntryItemProvider == null) {
			fmedaEntryItemProvider = new FMEDAEntryItemProvider(this);
		}

		return fmedaEntryItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void dispose() {
		if (failureLogicPackageItemProvider != null) failureLogicPackageItemProvider.dispose();
		if (failureItemProvider != null) failureItemProvider.dispose();
		if (securityViolationItemProvider != null) securityViolationItemProvider.dispose();
		if (failureModelItemProvider != null) failureModelItemProvider.dispose();
		if (minimalCutSetsItemProvider != null) minimalCutSetsItemProvider.dispose();
		if (minimalCutsetItemProvider != null) minimalCutsetItemProvider.dispose();
		if (probDistItemProvider != null) probDistItemProvider.dispose();
		if (probDistParamItemProvider != null) probDistParamItemProvider.dispose();
		if (faultTreeItemProvider != null) faultTreeItemProvider.dispose();
		if (causeItemProvider != null) causeItemProvider.dispose();
		if (gateItemProvider != null) gateItemProvider.dispose();
		if (markovChainItemProvider != null) markovChainItemProvider.dispose();
		if (stateItemProvider != null) stateItemProvider.dispose();
		if (transitionItemProvider != null) transitionItemProvider.dispose();
		if (fmeaItemProvider != null) fmeaItemProvider.dispose();
		if (fmeaEntryItemProvider != null) fmeaEntryItemProvider.dispose();
		if (fmedaEntryItemProvider != null) fmedaEntryItemProvider.dispose();
	}

}
